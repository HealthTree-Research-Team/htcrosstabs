% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_casting.R
\name{check_crosstab}
\alias{check_crosstab}
\alias{is.crosstab}
\alias{is.crosstab.data}
\alias{is.crosstab.categorical}
\alias{is.crosstab.numeric}
\alias{is.crosstab.likert}
\alias{is.crosstab.multi}
\alias{is.crosstab.grouped}
\alias{assert_crosstab}
\alias{assert_crosstab_data}
\alias{assert_crosstab_categorical}
\alias{assert_crosstab_numeric}
\alias{assert_crosstab_likert}
\alias{assert_crosstab_multi}
\alias{assert_crosstab_grouped}
\title{Check or Assert Crosstab Object Types}
\usage{
is.crosstab(obj, strict = TRUE)

is.crosstab.data(obj)

is.crosstab.categorical(obj)

is.crosstab.numeric(obj)

is.crosstab.likert(obj)

is.crosstab.multi(obj)

is.crosstab.grouped(obj)

assert_crosstab(obj, strict = TRUE)

assert_crosstab_data(obj)

assert_crosstab_categorical(obj)

assert_crosstab_numeric(obj)

assert_crosstab_likert(obj)

assert_crosstab_multi(obj)

assert_crosstab_grouped(obj)
}
\arguments{
\item{obj}{An object to check.}

\item{strict}{Logical. If `TRUE`, only returns `TRUE` for fully constructed
crosstab objects (will return false for raw data subclasses).}
}
\value{
Logical for `is.*()` and `assert_*()` functions (`assert_*()` functions throw error if check fails).
}
\description{
`is.crosstab()` and related functions test or assert the structure of a
crosstab object and its subclasses (e.g., numeric, categorical, likert,
multi-response, grouped). return `TRUE` if the object is a valid crosstab
(or specific subtype). The `assert_` functions will throw an error
if the check fails.
}
\section{Functions}{
\itemize{
\item \code{is.crosstab()}: Checks if the data is a crosstab object

\item \code{is.crosstab.data()}: Checks if the data is specifically a crosstab_data object

\item \code{is.crosstab.categorical()}: Checks if the data is categorical

\item \code{is.crosstab.numeric()}: Checks if the data is numeric

\item \code{is.crosstab.likert()}: Checks if the data is Likert-like

\item \code{is.crosstab.multi()}: Checks if the data is multi-response

\item \code{is.crosstab.grouped()}: Checks if the data is grouped

\item \code{assert_crosstab()}: Throws error if the data is not a crosstab

\item \code{assert_crosstab_data()}: Throws error if the data is not a crosstab_data

\item \code{assert_crosstab_categorical()}: Throws error if the data is not categorical

\item \code{assert_crosstab_numeric()}: Throws error if the data is not numeric

\item \code{assert_crosstab_likert()}: Throws error if the data is not Likert-like

\item \code{assert_crosstab_multi()}: Throws error if the data is not multi-response

\item \code{assert_crosstab_grouped()}: Throws error if the data is not grouped

}}
\examples{
# Create test data frame
test_df1 <- iris[, "Sepal.Length", drop = FALSE]
test_ct1 <- crosstab(test_df1)

is.crosstab(iris) # FALSE
is.crosstab(test_ct1) # TRUE
is.crosstab.categorical(test_ct1) # FALSE
is.crosstab.numeric(test_ct1) # TRUE

# Differentiating grouped and ungrouped data
test_df2 <- iris[, c("Sepal.Length", "Species"), drop = FALSE]
test_ct2 <- crosstab(test_df2, cohort_col_name = "Species")

is.crosstab.grouped(test_ct1) # FALSE
is.crosstab.grouped(test_ct2) # TRUE

# Differentiating complete crosstabs from inner data objects
test_df3 <- iris[, "Petal.Length", drop = FALSE]
test_ct_data <- crosstab_data(test_df3)

is.crosstab.data(test_ct1) # FALSE
is.crosstab.data(test_ct_data) # TRUE
is.crosstab(test_ct_data) # FALSE (only fully constructed crosstabs return true)
is.crosstab(test_ct_data, strict = FALSE) # TRUE (any part of a crosstab returns TRUE)
}
